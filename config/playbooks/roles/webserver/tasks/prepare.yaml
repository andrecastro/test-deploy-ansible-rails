---
- name: Upgrade apt-get
  become: yes
  action: apt update_cache=yes upgrade=yes

- name: Install ruby dependencies
  become: yes
  action: apt pkg={{item}} state=installed
  with_items:
    - build-essential
    - automake
    - bison
    - autoconf
    - pkg-config
    - libreadline6
    - libreadline6-dev
    - openssl
    - libssl-dev
    - curl
    - git-core
    - zlib1g
    - zlib1g-dev
    - libyaml-dev
    - libsqlite3-dev
    - libxml2-dev
    - libxslt1-dev
    - curl

- name: Install app dependencies
  become: yes
  apt: package={{ item }} state=installed force=yes update_cache=yes cache_valid_time=3600
  with_items:
    - libmysqlclient-dev
    - nodejs

- name: Remove system Ruby
  become: yes
  apt: pkg=ruby state=absent

- name: Get currently installed ruby version
  command: ruby -v
  register: current_ruby_version
  ignore_errors: true

- name: Create src directory
  become: yes
  file: path=/usr/local/src state=directory owner={{ deploy_user }}
  when: current_ruby_version.rc !=0 or ruby_version not in current_ruby_version.stdout

- name: Download Ruby {{ ruby_version }}
  get_url: url=http://ftp.ruby-lang.org/pub/ruby/ruby-{{ ruby_version }}.tar.gz
           dest=/usr/local/src/ruby.tgz
  when: current_ruby_version.rc !=0 or ruby_version not in current_ruby_version.stdout

- name: Expand Ruby
  unarchive: src=/usr/local/src/ruby.tgz dest=/usr/local/src/ remote_src=true
  when: current_ruby_version.rc !=0 or ruby_version not in current_ruby_version.stdout

- name: Build Ruby
  command: chdir=/usr/local/src/ruby-{{ ruby_version }}
           {{ item }}
  with_items:
    - ./configure --disable-install-rdoc
    - make
    - sudo make install
  when: current_ruby_version.rc !=0 or ruby_version not in current_ruby_version.stdout

- name: Update Rubygems
  become: yes
  command: gem update --system

- name: Copy no-documentation gemrc
  become: yes
  template: src=gemrc dest=/etc/gemrc

- name: Install Bundler
  become: true
  gem: name=bundler state=present user_install=false

- name: Create deployment directory
  file: path={{ deploy_directory }} state=directory

- name: Make shared directories
  file: path={{ deploy_directory }}/shared/{{ item }} state=directory
  with_items:
    - tmp
    - tmp/pids
    - tmp/puma
    - log
    - public
    - bundle
    - bin
    - config
    - config/puma
  tags: shared